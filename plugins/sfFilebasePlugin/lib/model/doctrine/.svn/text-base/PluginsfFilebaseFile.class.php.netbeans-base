<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginsfFilebaseFile extends BasesfFilebaseFile
{
  protected $original_filename = null;
  protected $original_path     = null;
  
  public function set($fieldName, $value, $load = true)
  {
    switch($fieldName)
    {
      case 'filename';
        if($this->original_filename === null)
        {
          $this->original_filename = $this->getFilename();
        }
        break;
      case 'path':
        if($this->original_path === null)
        {
          $this->original_path = $this->getPath();
        }
    }
    return parent::set($fieldName, $value, $load);
  }
  
  public function delete(Doctrine_Connection $conn = null)
  {
    $conn === null && $conn = Doctrine::getConnectionByTableName($this->getTable()->getTableName());
    
    try 
    {
      $conn->beginTransaction();
      $f = sfFilebasePlugin::getInstance();
      $f[$this->getPathname()]->delete();
      parent::delete($conn);
      $conn->commit();
    }
    catch (Exception $e)
    {
      $conn->rollback();
      throw $e;
    }
  }

  public function save(Doctrine_Connection $conn = null)
  {
    $conn === null && $conn = Doctrine::getConnectionByTableName($this->getTable()->getTableName());
    try
    {
      $conn->beginTransaction();
      if(!$this->isNew())
      {
        if($this->original_path !== null)
        {
          $f = sfFilebasePlugin::getInstance();
          $old_pathname = $f[$this->original_path . '/' . $this->getFilename()];
          $new_pathname = $old_pathname->move($this->getPath());
          $this->setHash($new_pathname->getHash());
        }
        if($this->original_filename !== null)
        {
          $f = sfFilebasePlugin::getInstance();
          $old_pathname = $f[$this->getPath() . '/' . $this->original_filename];
          $new_pathname = $old_pathname->rename($this->getFilename());
          $this->setHash($new_pathname->getHash());
        }
      }
      parent::save($conn);
      $this->original_filename = null;
      $this->original_path     = null;
      $conn->commit();
    }
    catch (Exception $e)
    {
      $conn->rollback();
      throw $e;
    }
  }
}