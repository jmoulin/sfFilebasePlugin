sfFilebasePlugin
================

sfFilebase provides an unified API for filesystem-related operations with focus on web-based applications.

It consists off a set of classes based on build-in SPL-file-classes (SplFileInfo/-Object, DirectoryIterator ...)
written by Marcus Boerger.
Documentation for these classes may be found in the [http://www.php.net/~helly/php/ext/spl/ API-docs].
It tries to fix the lack of the build-in SPL-Classes by dissociating different types of files. So there are
classes like FilebaseDirectory, FilebaseImage, FilebaseObject, FilebaseThumbnail... planning FilebaseZIP or
something like that.

sfFilebase can help you if you want to

*  upload files,

*  retrieve files from filesystem,

*  read/write/execute files,

*  do core fs-operations like chmod, mkdir, touch [...],

*  render appropriate file-name conversions (/var/www/files/images/image.jpg to
   /files/images/image.jpg); imagine you have a temp dir to store uploaed preview
   images and want to display them to the client in a one-line-code segment.
*  manipulate images, generating thumbnails (please help to implement much more
   image-manipulation capabilities) including cached file management

Installation
------------

_(Install instructions taken from README in sfThumbnailPlugin, (c) Fabien Potencier)_

To install the plugin for a symfony project, the usual process is to use the
symfony command line.

With symfony 1.0, use:

    $ symfony plugin-install http://plugins.symfony-project.com/sfFilebasePlugin

With symfony 1.1/1.2, use:

    $ symfony plugin:install sfFilebasePlugin

Alternatively, if you don't have PEAR installed, you can download the latest
package attached to this plugin's wiki page and extract it under your project's
`plugins/` directory.

Clear the cache to enable the autoloading to find the new classes:

    $ php symfony cc

You're done.

*Note*: If the [GD library](http://php.net/gd) is not activated, you might
have to uncomment the related line in your `php.ini` and restart your web
server to enable PHP image handling functions.

*Note*: To use !ImageMagick, you'll need to download and install the
binaries from [http://www.imagemagick.org](http://www.imagemagick.org).

Contents
--------

The plugin contains a set of classes, that are all instanciated by a file controller called Filebase. Please look at the phpdocs to see how it works.
There is a static utility class named FilebaseUtil that provides general worker methods.

Examples
--------

Create a new Filebase:

    $filebase = new Filebase('/var/www/my_filebase_dir');

Create a new Filebase in sf_project/web/uploads:

    $filebase = new Filebase()

The filebase "root"-directory must be writable by php. In standard-php configurations with mod_php you usually have to chmod(777) it or change the ownership to wwwrun or something like that.

Iterate over sub-directories:

    foreach($filebase AS $file)
    {
       //lets create thumbnails for all images
       $thumbnails = array();
       if($file instanceof FilebaseImage)
       {
         $thumbnails[] = $file->getThumbnail(array('width'=>120));
       }

       // Make a few stupid things to show up
       $file->copy('my_new_filename.ext');
       $file->copy('/path/to/folder/in/filebase/filename.ext');
       $file->copy($filebase->getFilebaseFile('my_folder/file.ext'));
    }
    // do something with the thumbnails.

File-Uploads:

    $destination_directory = "my_uploads";
    $files = $filebase->getUploadedFiles();
    $filebase->moveUploadedFile($files[0], $destination_directory);

    // Or by handling all uploaded files:
    $filebase->moveAllUploadedFiles($destination_directory);

Error-Handling
--------------
The above code is crap because it does not regard any error handling. sfFilebasePlugin handles errors by insanely throwing FilebaseException that can be
catched for merly any operation. Please get me a hint if you think that there is an exception that makes no sense in the context or if you miss one in another part of the code.

Developement
------------

SfFilebasePlugin is in developement state. Standard methods to deal with files are meant to be stable, but there is space for lot of improvements. Code Contributions and -improvements, bug-reports as fixes very welcomed!

Roadmap
-------
I'd love to see some file compession support in the sfFilebasePlugin - but i think its better to work on stability.

There are a few concrete features that i have in mind:

* Improving unit and functional tests
* Bug tracking and fixing
* Better symfony-integration

  * Integration in sfForms as an alternative sfValidatorFile, or perhaps a combination or both
  * Image processing: There are two adapters for imagick (no system calls like in sfThumbnailPlugin, but i even don't know which is the better way) and GD. This is redundant, because sfThumbnailPlugin also provides 2 adapters. Perhaps integrate it as a plugin-dependancy?
  * More, More, More! Image processing capabilities (experimental rotation is build in, perhaps a web2.0 mirror effect or something like this)

Test
----

I began to write some unit-tests on it, but they do not fit every aspect. So if you want to report a bug, i would appreciate if you'd pass unit or functional tests that reproduces the issue.

Ok, i hope that this plugin is useful, i'd love to hear your comments and critiques.

Have fun ;)